// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lightkv.proto

#ifndef PROTOBUF_INCLUDED_lightkv_2eproto
#define PROTOBUF_INCLUDED_lightkv_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_lightkv_2eproto 

namespace protobuf_lightkv_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_lightkv_2eproto
namespace lightkv {
class DeleteRequest;
class DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
class DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class InsertRequest;
class InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class InsertResponse;
class InsertResponseDefaultTypeInternal;
extern InsertResponseDefaultTypeInternal _InsertResponse_default_instance_;
class LightKVRequest;
class LightKVRequestDefaultTypeInternal;
extern LightKVRequestDefaultTypeInternal _LightKVRequest_default_instance_;
class LightKVResponse;
class LightKVResponseDefaultTypeInternal;
extern LightKVResponseDefaultTypeInternal _LightKVResponse_default_instance_;
class SelectRequest;
class SelectRequestDefaultTypeInternal;
extern SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
class SelectResponse;
class SelectResponseDefaultTypeInternal;
extern SelectResponseDefaultTypeInternal _SelectResponse_default_instance_;
}  // namespace lightkv
namespace google {
namespace protobuf {
template<> ::lightkv::DeleteRequest* Arena::CreateMaybeMessage<::lightkv::DeleteRequest>(Arena*);
template<> ::lightkv::DeleteResponse* Arena::CreateMaybeMessage<::lightkv::DeleteResponse>(Arena*);
template<> ::lightkv::Error* Arena::CreateMaybeMessage<::lightkv::Error>(Arena*);
template<> ::lightkv::InsertRequest* Arena::CreateMaybeMessage<::lightkv::InsertRequest>(Arena*);
template<> ::lightkv::InsertResponse* Arena::CreateMaybeMessage<::lightkv::InsertResponse>(Arena*);
template<> ::lightkv::LightKVRequest* Arena::CreateMaybeMessage<::lightkv::LightKVRequest>(Arena*);
template<> ::lightkv::LightKVResponse* Arena::CreateMaybeMessage<::lightkv::LightKVResponse>(Arena*);
template<> ::lightkv::SelectRequest* Arena::CreateMaybeMessage<::lightkv::SelectRequest>(Arena*);
template<> ::lightkv::SelectResponse* Arena::CreateMaybeMessage<::lightkv::SelectResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace lightkv {

enum OperatorType {
  SELECT = 0,
  INSERT = 1,
  DELETE = 2,
  OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OperatorType_IsValid(int value);
const OperatorType OperatorType_MIN = SELECT;
const OperatorType OperatorType_MAX = DELETE;
const int OperatorType_ARRAYSIZE = OperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OperatorType_descriptor();
inline const ::std::string& OperatorType_Name(OperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperatorType_descriptor(), value);
}
inline bool OperatorType_Parse(
    const ::std::string& name, OperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperatorType>(
    OperatorType_descriptor(), name, value);
}
enum SelectType {
  SINGLE = 0,
  PREFIX = 1,
  RANGE = 2,
  SelectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SelectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SelectType_IsValid(int value);
const SelectType SelectType_MIN = SINGLE;
const SelectType SelectType_MAX = RANGE;
const int SelectType_ARRAYSIZE = SelectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SelectType_descriptor();
inline const ::std::string& SelectType_Name(SelectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SelectType_descriptor(), value);
}
inline bool SelectType_Parse(
    const ::std::string& name, SelectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SelectType>(
    SelectType_descriptor(), name, value);
}
// ===================================================================

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(NULL);
  }

  Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_message = 2;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lightkv.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::int32 error_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightKVRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.LightKVRequest) */ {
 public:
  LightKVRequest();
  virtual ~LightKVRequest();

  LightKVRequest(const LightKVRequest& from);

  inline LightKVRequest& operator=(const LightKVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightKVRequest(LightKVRequest&& from) noexcept
    : LightKVRequest() {
    *this = ::std::move(from);
  }

  inline LightKVRequest& operator=(LightKVRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightKVRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightKVRequest* internal_default_instance() {
    return reinterpret_cast<const LightKVRequest*>(
               &_LightKVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LightKVRequest* other);
  friend void swap(LightKVRequest& a, LightKVRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightKVRequest* New() const final {
    return CreateMaybeMessage<LightKVRequest>(NULL);
  }

  LightKVRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightKVRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightKVRequest& from);
  void MergeFrom(const LightKVRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightKVRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lkey = 3;
  void clear_lkey();
  static const int kLkeyFieldNumber = 3;
  const ::std::string& lkey() const;
  void set_lkey(const ::std::string& value);
  #if LANG_CXX11
  void set_lkey(::std::string&& value);
  #endif
  void set_lkey(const char* value);
  void set_lkey(const char* value, size_t size);
  ::std::string* mutable_lkey();
  ::std::string* release_lkey();
  void set_allocated_lkey(::std::string* lkey);

  // string rkey = 4;
  void clear_rkey();
  static const int kRkeyFieldNumber = 4;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  #if LANG_CXX11
  void set_rkey(::std::string&& value);
  #endif
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .lightkv.OperatorType operator_type = 1;
  void clear_operator_type();
  static const int kOperatorTypeFieldNumber = 1;
  ::lightkv::OperatorType operator_type() const;
  void set_operator_type(::lightkv::OperatorType value);

  // .lightkv.SelectType select_type = 2;
  void clear_select_type();
  static const int kSelectTypeFieldNumber = 2;
  ::lightkv::SelectType select_type() const;
  void set_select_type(::lightkv::SelectType value);

  // @@protoc_insertion_point(class_scope:lightkv.LightKVRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lkey_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int operator_type_;
  int select_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LightKVResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.LightKVResponse) */ {
 public:
  LightKVResponse();
  virtual ~LightKVResponse();

  LightKVResponse(const LightKVResponse& from);

  inline LightKVResponse& operator=(const LightKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LightKVResponse(LightKVResponse&& from) noexcept
    : LightKVResponse() {
    *this = ::std::move(from);
  }

  inline LightKVResponse& operator=(LightKVResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightKVResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightKVResponse* internal_default_instance() {
    return reinterpret_cast<const LightKVResponse*>(
               &_LightKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LightKVResponse* other);
  friend void swap(LightKVResponse& a, LightKVResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LightKVResponse* New() const final {
    return CreateMaybeMessage<LightKVResponse>(NULL);
  }

  LightKVResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LightKVResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LightKVResponse& from);
  void MergeFrom(const LightKVResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightKVResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated string values = 4;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 4;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // string redirect = 2;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // .lightkv.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::lightkv::Error& _internal_error() const;
  public:
  const ::lightkv::Error& error() const;
  ::lightkv::Error* release_error();
  ::lightkv::Error* mutable_error();
  void set_allocated_error(::lightkv::Error* error);

  // @@protoc_insertion_point(class_scope:lightkv.LightKVResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::lightkv::Error* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeleteRequest* other);
  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const final {
    return CreateMaybeMessage<DeleteRequest>(NULL);
  }

  DeleteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:lightkv.DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.DeleteResponse) */ {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeleteResponse* other);
  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const final {
    return CreateMaybeMessage<DeleteResponse>(NULL);
  }

  DeleteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string redirect = 2;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // .lightkv.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::lightkv::Error& _internal_error() const;
  public:
  const ::lightkv::Error& error() const;
  ::lightkv::Error* release_error();
  ::lightkv::Error* mutable_error();
  void set_allocated_error(::lightkv::Error* error);

  // @@protoc_insertion_point(class_scope:lightkv.DeleteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::lightkv::Error* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.InsertRequest) */ {
 public:
  InsertRequest();
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InsertRequest* other);
  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertRequest* New() const final {
    return CreateMaybeMessage<InsertRequest>(NULL);
  }

  InsertRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:lightkv.InsertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.InsertResponse) */ {
 public:
  InsertResponse();
  virtual ~InsertResponse();

  InsertResponse(const InsertResponse& from);

  inline InsertResponse& operator=(const InsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertResponse(InsertResponse&& from) noexcept
    : InsertResponse() {
    *this = ::std::move(from);
  }

  inline InsertResponse& operator=(InsertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertResponse* internal_default_instance() {
    return reinterpret_cast<const InsertResponse*>(
               &_InsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(InsertResponse* other);
  friend void swap(InsertResponse& a, InsertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertResponse* New() const final {
    return CreateMaybeMessage<InsertResponse>(NULL);
  }

  InsertResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertResponse& from);
  void MergeFrom(const InsertResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string redirect = 2;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // .lightkv.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::lightkv::Error& _internal_error() const;
  public:
  const ::lightkv::Error& error() const;
  ::lightkv::Error* release_error();
  ::lightkv::Error* mutable_error();
  void set_allocated_error(::lightkv::Error* error);

  // @@protoc_insertion_point(class_scope:lightkv.InsertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::lightkv::Error* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.SelectRequest) */ {
 public:
  SelectRequest();
  virtual ~SelectRequest();

  SelectRequest(const SelectRequest& from);

  inline SelectRequest& operator=(const SelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectRequest(SelectRequest&& from) noexcept
    : SelectRequest() {
    *this = ::std::move(from);
  }

  inline SelectRequest& operator=(SelectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectRequest* internal_default_instance() {
    return reinterpret_cast<const SelectRequest*>(
               &_SelectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SelectRequest* other);
  friend void swap(SelectRequest& a, SelectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectRequest* New() const final {
    return CreateMaybeMessage<SelectRequest>(NULL);
  }

  SelectRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SelectRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SelectRequest& from);
  void MergeFrom(const SelectRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lkey = 2;
  void clear_lkey();
  static const int kLkeyFieldNumber = 2;
  const ::std::string& lkey() const;
  void set_lkey(const ::std::string& value);
  #if LANG_CXX11
  void set_lkey(::std::string&& value);
  #endif
  void set_lkey(const char* value);
  void set_lkey(const char* value, size_t size);
  ::std::string* mutable_lkey();
  ::std::string* release_lkey();
  void set_allocated_lkey(::std::string* lkey);

  // string rkey = 3;
  void clear_rkey();
  static const int kRkeyFieldNumber = 3;
  const ::std::string& rkey() const;
  void set_rkey(const ::std::string& value);
  #if LANG_CXX11
  void set_rkey(::std::string&& value);
  #endif
  void set_rkey(const char* value);
  void set_rkey(const char* value, size_t size);
  ::std::string* mutable_rkey();
  ::std::string* release_rkey();
  void set_allocated_rkey(::std::string* rkey);

  // .lightkv.SelectType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::lightkv::SelectType type() const;
  void set_type(::lightkv::SelectType value);

  // @@protoc_insertion_point(class_scope:lightkv.SelectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lkey_;
  ::google::protobuf::internal::ArenaStringPtr rkey_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lightkv.SelectResponse) */ {
 public:
  SelectResponse();
  virtual ~SelectResponse();

  SelectResponse(const SelectResponse& from);

  inline SelectResponse& operator=(const SelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SelectResponse(SelectResponse&& from) noexcept
    : SelectResponse() {
    *this = ::std::move(from);
  }

  inline SelectResponse& operator=(SelectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectResponse* internal_default_instance() {
    return reinterpret_cast<const SelectResponse*>(
               &_SelectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SelectResponse* other);
  friend void swap(SelectResponse& a, SelectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SelectResponse* New() const final {
    return CreateMaybeMessage<SelectResponse>(NULL);
  }

  SelectResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SelectResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SelectResponse& from);
  void MergeFrom(const SelectResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string keys = 3;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 3;
  const ::std::string& keys(int index) const;
  ::std::string* mutable_keys(int index);
  void set_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_keys(int index, ::std::string&& value);
  #endif
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  ::std::string* add_keys();
  void add_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_keys(::std::string&& value);
  #endif
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated string values = 4;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 4;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // string redirect = 2;
  void clear_redirect();
  static const int kRedirectFieldNumber = 2;
  const ::std::string& redirect() const;
  void set_redirect(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect(::std::string&& value);
  #endif
  void set_redirect(const char* value);
  void set_redirect(const char* value, size_t size);
  ::std::string* mutable_redirect();
  ::std::string* release_redirect();
  void set_allocated_redirect(::std::string* redirect);

  // .lightkv.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  private:
  const ::lightkv::Error& _internal_error() const;
  public:
  const ::lightkv::Error& error() const;
  ::lightkv::Error* release_error();
  ::lightkv::Error* mutable_error();
  void set_allocated_error(::lightkv::Error* error);

  // @@protoc_insertion_point(class_scope:lightkv.SelectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::internal::ArenaStringPtr redirect_;
  ::lightkv::Error* error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_lightkv_2eproto::TableStruct;
};
// ===================================================================

class StorageService_Stub;

class StorageService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StorageService() {};
 public:
  virtual ~StorageService();

  typedef StorageService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void operate(::google::protobuf::RpcController* controller,
                       const ::lightkv::LightKVRequest* request,
                       ::lightkv::LightKVResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageService);
};

class StorageService_Stub : public StorageService {
 public:
  StorageService_Stub(::google::protobuf::RpcChannel* channel);
  StorageService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~StorageService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements StorageService ------------------------------------------

  void operate(::google::protobuf::RpcController* controller,
                       const ::lightkv::LightKVRequest* request,
                       ::lightkv::LightKVResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageService_Stub);
};


// -------------------------------------------------------------------

class ProxyService_Stub;

class ProxyService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ProxyService() {};
 public:
  virtual ~ProxyService();

  typedef ProxyService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void insert(::google::protobuf::RpcController* controller,
                       const ::lightkv::InsertRequest* request,
                       ::lightkv::InsertResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void select(::google::protobuf::RpcController* controller,
                       const ::lightkv::SelectRequest* request,
                       ::lightkv::SelectResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void delete_(::google::protobuf::RpcController* controller,
                       const ::lightkv::DeleteRequest* request,
                       ::lightkv::DeleteResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProxyService);
};

class ProxyService_Stub : public ProxyService {
 public:
  ProxyService_Stub(::google::protobuf::RpcChannel* channel);
  ProxyService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ProxyService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ProxyService ------------------------------------------

  void insert(::google::protobuf::RpcController* controller,
                       const ::lightkv::InsertRequest* request,
                       ::lightkv::InsertResponse* response,
                       ::google::protobuf::Closure* done);
  void select(::google::protobuf::RpcController* controller,
                       const ::lightkv::SelectRequest* request,
                       ::lightkv::SelectResponse* response,
                       ::google::protobuf::Closure* done);
  void delete_(::google::protobuf::RpcController* controller,
                       const ::lightkv::DeleteRequest* request,
                       ::lightkv::DeleteResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProxyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Error

// int32 error_code = 1;
inline void Error::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 Error::error_code() const {
  // @@protoc_insertion_point(field_get:lightkv.Error.error_code)
  return error_code_;
}
inline void Error::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:lightkv.Error.error_code)
}

// string error_message = 2;
inline void Error::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::error_message() const {
  // @@protoc_insertion_point(field_get:lightkv.Error.error_message)
  return error_message_.GetNoArena();
}
inline void Error::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.Error.error_message)
}
#if LANG_CXX11
inline void Error::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.Error.error_message)
}
#endif
inline void Error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.Error.error_message)
}
inline void Error::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.Error.error_message)
}
inline ::std::string* Error::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.Error.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_error_message() {
  // @@protoc_insertion_point(field_release:lightkv.Error.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:lightkv.Error.error_message)
}

// -------------------------------------------------------------------

// LightKVRequest

// .lightkv.OperatorType operator_type = 1;
inline void LightKVRequest::clear_operator_type() {
  operator_type_ = 0;
}
inline ::lightkv::OperatorType LightKVRequest::operator_type() const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVRequest.operator_type)
  return static_cast< ::lightkv::OperatorType >(operator_type_);
}
inline void LightKVRequest::set_operator_type(::lightkv::OperatorType value) {
  
  operator_type_ = value;
  // @@protoc_insertion_point(field_set:lightkv.LightKVRequest.operator_type)
}

// .lightkv.SelectType select_type = 2;
inline void LightKVRequest::clear_select_type() {
  select_type_ = 0;
}
inline ::lightkv::SelectType LightKVRequest::select_type() const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVRequest.select_type)
  return static_cast< ::lightkv::SelectType >(select_type_);
}
inline void LightKVRequest::set_select_type(::lightkv::SelectType value) {
  
  select_type_ = value;
  // @@protoc_insertion_point(field_set:lightkv.LightKVRequest.select_type)
}

// string lkey = 3;
inline void LightKVRequest::clear_lkey() {
  lkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightKVRequest::lkey() const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVRequest.lkey)
  return lkey_.GetNoArena();
}
inline void LightKVRequest::set_lkey(const ::std::string& value) {
  
  lkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.LightKVRequest.lkey)
}
#if LANG_CXX11
inline void LightKVRequest::set_lkey(::std::string&& value) {
  
  lkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.LightKVRequest.lkey)
}
#endif
inline void LightKVRequest::set_lkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.LightKVRequest.lkey)
}
inline void LightKVRequest::set_lkey(const char* value, size_t size) {
  
  lkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.LightKVRequest.lkey)
}
inline ::std::string* LightKVRequest::mutable_lkey() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVRequest.lkey)
  return lkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightKVRequest::release_lkey() {
  // @@protoc_insertion_point(field_release:lightkv.LightKVRequest.lkey)
  
  return lkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightKVRequest::set_allocated_lkey(::std::string* lkey) {
  if (lkey != NULL) {
    
  } else {
    
  }
  lkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lkey);
  // @@protoc_insertion_point(field_set_allocated:lightkv.LightKVRequest.lkey)
}

// string rkey = 4;
inline void LightKVRequest::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightKVRequest::rkey() const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVRequest.rkey)
  return rkey_.GetNoArena();
}
inline void LightKVRequest::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.LightKVRequest.rkey)
}
#if LANG_CXX11
inline void LightKVRequest::set_rkey(::std::string&& value) {
  
  rkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.LightKVRequest.rkey)
}
#endif
inline void LightKVRequest::set_rkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.LightKVRequest.rkey)
}
inline void LightKVRequest::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.LightKVRequest.rkey)
}
inline ::std::string* LightKVRequest::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVRequest.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightKVRequest::release_rkey() {
  // @@protoc_insertion_point(field_release:lightkv.LightKVRequest.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightKVRequest::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:lightkv.LightKVRequest.rkey)
}

// string value = 5;
inline void LightKVRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightKVRequest::value() const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVRequest.value)
  return value_.GetNoArena();
}
inline void LightKVRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.LightKVRequest.value)
}
#if LANG_CXX11
inline void LightKVRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.LightKVRequest.value)
}
#endif
inline void LightKVRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.LightKVRequest.value)
}
inline void LightKVRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.LightKVRequest.value)
}
inline ::std::string* LightKVRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightKVRequest::release_value() {
  // @@protoc_insertion_point(field_release:lightkv.LightKVRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightKVRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lightkv.LightKVRequest.value)
}

// -------------------------------------------------------------------

// LightKVResponse

// .lightkv.Error error = 1;
inline bool LightKVResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void LightKVResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::lightkv::Error& LightKVResponse::_internal_error() const {
  return *error_;
}
inline const ::lightkv::Error& LightKVResponse::error() const {
  const ::lightkv::Error* p = error_;
  // @@protoc_insertion_point(field_get:lightkv.LightKVResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::lightkv::Error*>(
      &::lightkv::_Error_default_instance_);
}
inline ::lightkv::Error* LightKVResponse::release_error() {
  // @@protoc_insertion_point(field_release:lightkv.LightKVResponse.error)
  
  ::lightkv::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::lightkv::Error* LightKVResponse::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::lightkv::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVResponse.error)
  return error_;
}
inline void LightKVResponse::set_allocated_error(::lightkv::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:lightkv.LightKVResponse.error)
}

// string redirect = 2;
inline void LightKVResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LightKVResponse::redirect() const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVResponse.redirect)
  return redirect_.GetNoArena();
}
inline void LightKVResponse::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.LightKVResponse.redirect)
}
#if LANG_CXX11
inline void LightKVResponse::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.LightKVResponse.redirect)
}
#endif
inline void LightKVResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.LightKVResponse.redirect)
}
inline void LightKVResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.LightKVResponse.redirect)
}
inline ::std::string* LightKVResponse::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LightKVResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:lightkv.LightKVResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LightKVResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:lightkv.LightKVResponse.redirect)
}

// repeated string keys = 3;
inline int LightKVResponse::keys_size() const {
  return keys_.size();
}
inline void LightKVResponse::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& LightKVResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVResponse.keys)
  return keys_.Get(index);
}
inline ::std::string* LightKVResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVResponse.keys)
  return keys_.Mutable(index);
}
inline void LightKVResponse::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightkv.LightKVResponse.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LightKVResponse::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightkv.LightKVResponse.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LightKVResponse::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightkv.LightKVResponse.keys)
}
inline void LightKVResponse::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightkv.LightKVResponse.keys)
}
inline ::std::string* LightKVResponse::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:lightkv.LightKVResponse.keys)
  return keys_.Add();
}
inline void LightKVResponse::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightkv.LightKVResponse.keys)
}
#if LANG_CXX11
inline void LightKVResponse::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightkv.LightKVResponse.keys)
}
#endif
inline void LightKVResponse::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightkv.LightKVResponse.keys)
}
inline void LightKVResponse::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightkv.LightKVResponse.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LightKVResponse::keys() const {
  // @@protoc_insertion_point(field_list:lightkv.LightKVResponse.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LightKVResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:lightkv.LightKVResponse.keys)
  return &keys_;
}

// repeated string values = 4;
inline int LightKVResponse::values_size() const {
  return values_.size();
}
inline void LightKVResponse::clear_values() {
  values_.Clear();
}
inline const ::std::string& LightKVResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:lightkv.LightKVResponse.values)
  return values_.Get(index);
}
inline ::std::string* LightKVResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:lightkv.LightKVResponse.values)
  return values_.Mutable(index);
}
inline void LightKVResponse::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightkv.LightKVResponse.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LightKVResponse::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightkv.LightKVResponse.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LightKVResponse::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightkv.LightKVResponse.values)
}
inline void LightKVResponse::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightkv.LightKVResponse.values)
}
inline ::std::string* LightKVResponse::add_values() {
  // @@protoc_insertion_point(field_add_mutable:lightkv.LightKVResponse.values)
  return values_.Add();
}
inline void LightKVResponse::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightkv.LightKVResponse.values)
}
#if LANG_CXX11
inline void LightKVResponse::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightkv.LightKVResponse.values)
}
#endif
inline void LightKVResponse::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightkv.LightKVResponse.values)
}
inline void LightKVResponse::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightkv.LightKVResponse.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LightKVResponse::values() const {
  // @@protoc_insertion_point(field_list:lightkv.LightKVResponse.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LightKVResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:lightkv.LightKVResponse.values)
  return &values_;
}

// -------------------------------------------------------------------

// DeleteRequest

// string key = 1;
inline void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:lightkv.DeleteRequest.key)
  return key_.GetNoArena();
}
inline void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.DeleteRequest.key)
}
#if LANG_CXX11
inline void DeleteRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.DeleteRequest.key)
}
#endif
inline void DeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.DeleteRequest.key)
}
inline ::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:lightkv.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:lightkv.DeleteRequest.key)
}

// -------------------------------------------------------------------

// DeleteResponse

// .lightkv.Error error = 1;
inline bool DeleteResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void DeleteResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::lightkv::Error& DeleteResponse::_internal_error() const {
  return *error_;
}
inline const ::lightkv::Error& DeleteResponse::error() const {
  const ::lightkv::Error* p = error_;
  // @@protoc_insertion_point(field_get:lightkv.DeleteResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::lightkv::Error*>(
      &::lightkv::_Error_default_instance_);
}
inline ::lightkv::Error* DeleteResponse::release_error() {
  // @@protoc_insertion_point(field_release:lightkv.DeleteResponse.error)
  
  ::lightkv::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::lightkv::Error* DeleteResponse::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::lightkv::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightkv.DeleteResponse.error)
  return error_;
}
inline void DeleteResponse::set_allocated_error(::lightkv::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:lightkv.DeleteResponse.error)
}

// string redirect = 2;
inline void DeleteResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteResponse::redirect() const {
  // @@protoc_insertion_point(field_get:lightkv.DeleteResponse.redirect)
  return redirect_.GetNoArena();
}
inline void DeleteResponse::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.DeleteResponse.redirect)
}
#if LANG_CXX11
inline void DeleteResponse::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.DeleteResponse.redirect)
}
#endif
inline void DeleteResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.DeleteResponse.redirect)
}
inline void DeleteResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.DeleteResponse.redirect)
}
inline ::std::string* DeleteResponse::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.DeleteResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:lightkv.DeleteResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:lightkv.DeleteResponse.redirect)
}

// -------------------------------------------------------------------

// InsertRequest

// string key = 1;
inline void InsertRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertRequest::key() const {
  // @@protoc_insertion_point(field_get:lightkv.InsertRequest.key)
  return key_.GetNoArena();
}
inline void InsertRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.InsertRequest.key)
}
#if LANG_CXX11
inline void InsertRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.InsertRequest.key)
}
#endif
inline void InsertRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.InsertRequest.key)
}
inline void InsertRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.InsertRequest.key)
}
inline ::std::string* InsertRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.InsertRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertRequest::release_key() {
  // @@protoc_insertion_point(field_release:lightkv.InsertRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:lightkv.InsertRequest.key)
}

// string value = 2;
inline void InsertRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertRequest::value() const {
  // @@protoc_insertion_point(field_get:lightkv.InsertRequest.value)
  return value_.GetNoArena();
}
inline void InsertRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.InsertRequest.value)
}
#if LANG_CXX11
inline void InsertRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.InsertRequest.value)
}
#endif
inline void InsertRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.InsertRequest.value)
}
inline void InsertRequest::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.InsertRequest.value)
}
inline ::std::string* InsertRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.InsertRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertRequest::release_value() {
  // @@protoc_insertion_point(field_release:lightkv.InsertRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lightkv.InsertRequest.value)
}

// -------------------------------------------------------------------

// InsertResponse

// .lightkv.Error error = 1;
inline bool InsertResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void InsertResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::lightkv::Error& InsertResponse::_internal_error() const {
  return *error_;
}
inline const ::lightkv::Error& InsertResponse::error() const {
  const ::lightkv::Error* p = error_;
  // @@protoc_insertion_point(field_get:lightkv.InsertResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::lightkv::Error*>(
      &::lightkv::_Error_default_instance_);
}
inline ::lightkv::Error* InsertResponse::release_error() {
  // @@protoc_insertion_point(field_release:lightkv.InsertResponse.error)
  
  ::lightkv::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::lightkv::Error* InsertResponse::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::lightkv::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightkv.InsertResponse.error)
  return error_;
}
inline void InsertResponse::set_allocated_error(::lightkv::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:lightkv.InsertResponse.error)
}

// string redirect = 2;
inline void InsertResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InsertResponse::redirect() const {
  // @@protoc_insertion_point(field_get:lightkv.InsertResponse.redirect)
  return redirect_.GetNoArena();
}
inline void InsertResponse::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.InsertResponse.redirect)
}
#if LANG_CXX11
inline void InsertResponse::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.InsertResponse.redirect)
}
#endif
inline void InsertResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.InsertResponse.redirect)
}
inline void InsertResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.InsertResponse.redirect)
}
inline ::std::string* InsertResponse::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.InsertResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:lightkv.InsertResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:lightkv.InsertResponse.redirect)
}

// -------------------------------------------------------------------

// SelectRequest

// .lightkv.SelectType type = 1;
inline void SelectRequest::clear_type() {
  type_ = 0;
}
inline ::lightkv::SelectType SelectRequest::type() const {
  // @@protoc_insertion_point(field_get:lightkv.SelectRequest.type)
  return static_cast< ::lightkv::SelectType >(type_);
}
inline void SelectRequest::set_type(::lightkv::SelectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:lightkv.SelectRequest.type)
}

// string lkey = 2;
inline void SelectRequest::clear_lkey() {
  lkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectRequest::lkey() const {
  // @@protoc_insertion_point(field_get:lightkv.SelectRequest.lkey)
  return lkey_.GetNoArena();
}
inline void SelectRequest::set_lkey(const ::std::string& value) {
  
  lkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.SelectRequest.lkey)
}
#if LANG_CXX11
inline void SelectRequest::set_lkey(::std::string&& value) {
  
  lkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.SelectRequest.lkey)
}
#endif
inline void SelectRequest::set_lkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.SelectRequest.lkey)
}
inline void SelectRequest::set_lkey(const char* value, size_t size) {
  
  lkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.SelectRequest.lkey)
}
inline ::std::string* SelectRequest::mutable_lkey() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.SelectRequest.lkey)
  return lkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectRequest::release_lkey() {
  // @@protoc_insertion_point(field_release:lightkv.SelectRequest.lkey)
  
  return lkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectRequest::set_allocated_lkey(::std::string* lkey) {
  if (lkey != NULL) {
    
  } else {
    
  }
  lkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lkey);
  // @@protoc_insertion_point(field_set_allocated:lightkv.SelectRequest.lkey)
}

// string rkey = 3;
inline void SelectRequest::clear_rkey() {
  rkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectRequest::rkey() const {
  // @@protoc_insertion_point(field_get:lightkv.SelectRequest.rkey)
  return rkey_.GetNoArena();
}
inline void SelectRequest::set_rkey(const ::std::string& value) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.SelectRequest.rkey)
}
#if LANG_CXX11
inline void SelectRequest::set_rkey(::std::string&& value) {
  
  rkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.SelectRequest.rkey)
}
#endif
inline void SelectRequest::set_rkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.SelectRequest.rkey)
}
inline void SelectRequest::set_rkey(const char* value, size_t size) {
  
  rkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.SelectRequest.rkey)
}
inline ::std::string* SelectRequest::mutable_rkey() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.SelectRequest.rkey)
  return rkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectRequest::release_rkey() {
  // @@protoc_insertion_point(field_release:lightkv.SelectRequest.rkey)
  
  return rkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectRequest::set_allocated_rkey(::std::string* rkey) {
  if (rkey != NULL) {
    
  } else {
    
  }
  rkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rkey);
  // @@protoc_insertion_point(field_set_allocated:lightkv.SelectRequest.rkey)
}

// -------------------------------------------------------------------

// SelectResponse

// .lightkv.Error error = 1;
inline bool SelectResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SelectResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
inline const ::lightkv::Error& SelectResponse::_internal_error() const {
  return *error_;
}
inline const ::lightkv::Error& SelectResponse::error() const {
  const ::lightkv::Error* p = error_;
  // @@protoc_insertion_point(field_get:lightkv.SelectResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::lightkv::Error*>(
      &::lightkv::_Error_default_instance_);
}
inline ::lightkv::Error* SelectResponse::release_error() {
  // @@protoc_insertion_point(field_release:lightkv.SelectResponse.error)
  
  ::lightkv::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::lightkv::Error* SelectResponse::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::lightkv::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:lightkv.SelectResponse.error)
  return error_;
}
inline void SelectResponse::set_allocated_error(::lightkv::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:lightkv.SelectResponse.error)
}

// string redirect = 2;
inline void SelectResponse::clear_redirect() {
  redirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SelectResponse::redirect() const {
  // @@protoc_insertion_point(field_get:lightkv.SelectResponse.redirect)
  return redirect_.GetNoArena();
}
inline void SelectResponse::set_redirect(const ::std::string& value) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lightkv.SelectResponse.redirect)
}
#if LANG_CXX11
inline void SelectResponse::set_redirect(::std::string&& value) {
  
  redirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightkv.SelectResponse.redirect)
}
#endif
inline void SelectResponse::set_redirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightkv.SelectResponse.redirect)
}
inline void SelectResponse::set_redirect(const char* value, size_t size) {
  
  redirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightkv.SelectResponse.redirect)
}
inline ::std::string* SelectResponse::mutable_redirect() {
  
  // @@protoc_insertion_point(field_mutable:lightkv.SelectResponse.redirect)
  return redirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SelectResponse::release_redirect() {
  // @@protoc_insertion_point(field_release:lightkv.SelectResponse.redirect)
  
  return redirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SelectResponse::set_allocated_redirect(::std::string* redirect) {
  if (redirect != NULL) {
    
  } else {
    
  }
  redirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect);
  // @@protoc_insertion_point(field_set_allocated:lightkv.SelectResponse.redirect)
}

// repeated string keys = 3;
inline int SelectResponse::keys_size() const {
  return keys_.size();
}
inline void SelectResponse::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& SelectResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:lightkv.SelectResponse.keys)
  return keys_.Get(index);
}
inline ::std::string* SelectResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:lightkv.SelectResponse.keys)
  return keys_.Mutable(index);
}
inline void SelectResponse::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightkv.SelectResponse.keys)
  keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SelectResponse::set_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightkv.SelectResponse.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SelectResponse::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightkv.SelectResponse.keys)
}
inline void SelectResponse::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightkv.SelectResponse.keys)
}
inline ::std::string* SelectResponse::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:lightkv.SelectResponse.keys)
  return keys_.Add();
}
inline void SelectResponse::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightkv.SelectResponse.keys)
}
#if LANG_CXX11
inline void SelectResponse::add_keys(::std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightkv.SelectResponse.keys)
}
#endif
inline void SelectResponse::add_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightkv.SelectResponse.keys)
}
inline void SelectResponse::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightkv.SelectResponse.keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SelectResponse::keys() const {
  // @@protoc_insertion_point(field_list:lightkv.SelectResponse.keys)
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SelectResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:lightkv.SelectResponse.keys)
  return &keys_;
}

// repeated string values = 4;
inline int SelectResponse::values_size() const {
  return values_.size();
}
inline void SelectResponse::clear_values() {
  values_.Clear();
}
inline const ::std::string& SelectResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:lightkv.SelectResponse.values)
  return values_.Get(index);
}
inline ::std::string* SelectResponse::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:lightkv.SelectResponse.values)
  return values_.Mutable(index);
}
inline void SelectResponse::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lightkv.SelectResponse.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SelectResponse::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lightkv.SelectResponse.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SelectResponse::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightkv.SelectResponse.values)
}
inline void SelectResponse::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightkv.SelectResponse.values)
}
inline ::std::string* SelectResponse::add_values() {
  // @@protoc_insertion_point(field_add_mutable:lightkv.SelectResponse.values)
  return values_.Add();
}
inline void SelectResponse::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightkv.SelectResponse.values)
}
#if LANG_CXX11
inline void SelectResponse::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightkv.SelectResponse.values)
}
#endif
inline void SelectResponse::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightkv.SelectResponse.values)
}
inline void SelectResponse::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightkv.SelectResponse.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SelectResponse::values() const {
  // @@protoc_insertion_point(field_list:lightkv.SelectResponse.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SelectResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:lightkv.SelectResponse.values)
  return &values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lightkv

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lightkv::OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightkv::OperatorType>() {
  return ::lightkv::OperatorType_descriptor();
}
template <> struct is_proto_enum< ::lightkv::SelectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lightkv::SelectType>() {
  return ::lightkv::SelectType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_lightkv_2eproto
